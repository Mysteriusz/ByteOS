#include "ByteOS.h"

#define FIRST_PAGE_OFFSET 0x1000 // 4 KiB RAM
#define PAGE_SIZE 0x1000 // 4 KiB RAM
#define MAX_PAGES 0x400000 // 16 GiB RAM
#define PAGES_PER_GROUP 0x08 // 8 Pages
#define MAX_PAGE_GROUPS MAX_PAGES / PAGES_PER_GROUP // 524,288 Groups

typedef BOOLEAN BT_MEMORY_PAGE_ALLOCATION;
#define PAGE_FREE 0
#define PAGE_ALLOCATED 1

typedef UINT8 BT_MEMORY_PAGE_FLAGS;
#define BT_MEMORY_READ 0x01
#define BT_MEMORY_WRITE 0x02
#define BT_MEMORY_EXECUTE 0x04
#define BT_MEMORY_USER 0x08
#define BT_MEMORY_KERNEL 0x10

#define BT_MEMORY_RW (BT_MEMORY_READ | BT_MEMORY_WRITE)
#define BT_MEMORY_RWX (BT_MEMORY_READ | BT_MEMORY_WRITE | BT_MEMORY_EXECUTE)

#define BT_MEMORY_USER_RW (BT_MEMORY_USER | BT_MEMORY_RW)
#define BT_MEMORY_KERNEL_RW (BT_MEMORY_KERNEL | BT_MEMORY_RW)

#define BT_MEMORY_USER_RWX (BT_MEMORY_USER | BT_MEMORY_RWX)
#define BT_MEMORY_KERNEL_RWX (BT_MEMORY_KERNEL | BT_MEMORY_RWX)

typedef struct MEMORY_PAGE{
    BT_MEMORY_PAGE_ALLOCATION allocation;
    BT_MEMORY_PAGE_FLAGS flags;
    UINT8 attributes;
    PHYSICAL_ADDRESS physicalAddress;
    UINT64 index;
} MEMORY_PAGE;

BT_STATUS ByteAPI InitializeMemory(KERNEL_MEMORY_MAP *memMap);

BT_STATUS ByteAPI AllocPages(IN OUT VOID **buffer, IN OUT UINTN *count, IN BT_MEMORY_PAGE_FLAGS flags);
BT_STATUS ByteAPI FreePages(IN VOID *buffer, IN OUT UINTN *count, IN BT_MEMORY_PAGE_FLAGS flags);
BT_STATUS ByteAPI ClearPages(IN VOID *address, IN UINTN count, IN BT_MEMORY_PAGE_FLAGS flags);

VOID DEBUG_ALLOC(UINT64 index);
VOID DEBUG_FREE(UINT64 index);
PHYSICAL_ADDRESS DEBUG_CLOSEST();

MEMORY_PAGE ByteAPI GetPage(UINT64 index);